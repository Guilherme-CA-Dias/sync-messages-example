isCustomized: true
parentId: 688144b55c999fea55f50f91
integrationId: 688773c67e68e15f9f5d9f44
key: get-chats
state: READY
errors: []
isDeactivated: false
id: 689657fc467319e1f049680d
name: Get Chats
type: run-javascript
inputSchema:
  type: object
  properties:
    cursor:
      type: string
config:
  code: "export default async function processGmailThreads(context, input) {\n\tconsole.log(\"üöÄ Starting Gmail thread processing...\");\n\n\ttry {\n\t\t// Step 1: Fetch Gmail threads\n\t\tconsole.log(\"STEP 1: Fetching Gmail threads\");\n\n\t\t// Build query parameters\n\t\tconst queryParams = {};\n\t\tif (input?.cursor) {\n\t\t\tqueryParams.pageToken = input.cursor;\n\t\t\tconsole.log(`üìÑ Using cursor: ${input.cursor}`);\n\t\t}\n\t\t// Default to 50 threads, allow override via maxResults\n\t\tqueryParams.maxResults = input?.maxResults || 50;\n\t\tconsole.log(`üìä Max results: ${queryParams.maxResults}`);\n\n\t\tconst threadsResponse = await context.externalApiClient.get(\n\t\t\t`/gmail/v1/users/me/threads`,\n\t\t\t{},\n\t\t\tqueryParams\n\t\t);\n\n\t\tconsole.log(`üìß Found ${threadsResponse.threads?.length || 0} threads`);\n\n\t\tif (!threadsResponse.threads || threadsResponse.threads.length === 0) {\n\t\t\tconsole.log(\"üì≠ No threads found\");\n\t\t\treturn {\n\t\t\t\tsuccess: true,\n\t\t\t\trecords: [],\n\t\t\t\tmessage: \"No threads found\",\n\t\t\t\tpagination: {\n\t\t\t\t\tnextPageToken: threadsResponse.nextPageToken,\n\t\t\t\t\tresultSizeEstimate: threadsResponse.resultSizeEstimate,\n\t\t\t\t\thasMorePages: !!threadsResponse.nextPageToken,\n\t\t\t\t},\n\t\t\t\tmetadata: {\n\t\t\t\t\ttimestamp: new Date().toISOString(),\n\t\t\t\t\tthreadsCount: 0,\n\t\t\t\t\tcursor: input?.cursor || null,\n\t\t\t\t\tmaxResults: input?.maxResults || null,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\t// Step 2: Enrich threads with subject information\n\t\tconsole.log(\"STEP 2: Enriching threads with subject information\");\n\n\t\tconst enrichedThreads = [];\n\t\tconst maxThreads = input?.maxThreads || 50; // Default to 50 threads\n\t\tconst threadsToProcess = threadsResponse.threads.slice(0, maxThreads);\n\n\t\tconsole.log(\n\t\t\t`üìä Processing ${threadsToProcess.length} threads (max: ${maxThreads})`\n\t\t);\n\n\t\tfor (let i = 0; i < threadsToProcess.length; i++) {\n\t\t\tconst thread = threadsToProcess[i];\n\n\t\t\t// Log progress every 5 threads\n\t\t\tif (i % 5 === 0) {\n\t\t\t\tconsole.log(`üìä Processing thread ${i + 1}/${threadsToProcess.length}`);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// Fetch thread metadata with subject\n\t\t\t\tconst threadMetadataResponse = await context.externalApiClient.get(\n\t\t\t\t\t`/gmail/v1/users/me/threads/${thread.id}?format=metadata&metadataHeaders=Subject`\n\t\t\t\t);\n\n\t\t\t\t// Extract subject from the first message\n\t\t\t\tlet subject = \"No Subject\";\n\t\t\t\tif (\n\t\t\t\t\tthreadMetadataResponse.messages &&\n\t\t\t\t\tthreadMetadataResponse.messages.length > 0\n\t\t\t\t) {\n\t\t\t\t\tconst firstMessage = threadMetadataResponse.messages[0];\n\t\t\t\t\tif (firstMessage.payload && firstMessage.payload.headers) {\n\t\t\t\t\t\tconst subjectHeader = firstMessage.payload.headers.find(\n\t\t\t\t\t\t\t(header) => header.name === \"Subject\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (subjectHeader) {\n\t\t\t\t\t\t\tsubject = subjectHeader.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Create enriched thread object\n\t\t\t\tconst enrichedThread = {\n\t\t\t\t\tid: thread.id,\n\t\t\t\t\tsnippet: thread.snippet,\n\t\t\t\t\thistoryId: thread.historyId,\n\t\t\t\t\tsubject: subject,\n\t\t\t\t\tmessageCount: threadMetadataResponse.messages?.length || 0,\n\t\t\t\t\tinternalDate: threadMetadataResponse.messages?.[0]?.internalDate,\n\t\t\t\t};\n\n\t\t\t\tenrichedThreads.push(enrichedThread);\n\n\t\t\t\tconsole.log(\n\t\t\t\t\t`‚úÖ Enriched thread ${i + 1}: \"${subject.substring(0, 50)}...\"`\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`‚ö†Ô∏è Failed to enrich thread ${thread.id}: ${error.message}`\n\t\t\t\t);\n\t\t\t\t// Add thread without subject if enrichment fails\n\t\t\t\tenrichedThreads.push({\n\t\t\t\t\tid: thread.id,\n\t\t\t\t\tsnippet: thread.snippet,\n\t\t\t\t\thistoryId: thread.historyId,\n\t\t\t\t\tsubject: \"Error fetching subject\",\n\t\t\t\t\tmessageCount: 0,\n\t\t\t\t\terror: error.message,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconsole.log(`üèÅ Finished processing ${enrichedThreads.length} threads`);\n\n\t\t// Summary statistics\n\t\tconst successfulThreads = enrichedThreads.filter(\n\t\t\t(thread) => thread.subject !== \"Error fetching subject\"\n\t\t).length;\n\t\tconst failedThreads = enrichedThreads.length - successfulThreads;\n\n\t\tconsole.log(\n\t\t\t`üìä Summary: ${successfulThreads} successful, ${failedThreads} failed`\n\t\t);\n\n\t\t// Transform enriched threads to the required structure\n\t\tconst records = enrichedThreads.map((thread) => ({\n\t\t\tfields: {\n\t\t\t\tid: thread.id,\n\t\t\t\tplatform: \"Gmail\",\n\t\t\t\tname: thread.subject,\n\t\t\t},\n\t\t\tid: thread.id,\n\t\t\tname: thread.subject,\n\t\t\tcreatedTime: thread.internalDate\n\t\t\t\t? parseInt(thread.internalDate) / 1000\n\t\t\t\t: null,\n\t\t\tupdatedTime: thread.internalDate ? parseInt(thread.internalDate) : null,\n\t\t\tcreatedById: null, // Gmail doesn't provide creator ID in this context\n\t\t\trawFields: {\n\t\t\t\tsnippet: thread.snippet,\n\t\t\t\thistoryId: thread.historyId,\n\t\t\t\tmessageCount: thread.messageCount,\n\t\t\t\tsubject: thread.subject,\n\t\t\t\tinternalDate: thread.internalDate,\n\t\t\t\terror: thread.error || null,\n\t\t\t},\n\t\t}));\n\n\t\treturn {\n\t\t\tsuccess: true,\n\t\t\trecords: records,\n\t\t\tthreadsCount: enrichedThreads.length,\n\t\t\tsuccessfulThreads: successfulThreads,\n\t\t\tfailedThreads: failedThreads,\n\t\t\tmessage: `Successfully processed ${enrichedThreads.length} Gmail threads`,\n\t\t\tcursor: threadsResponse.nextPageToken,\n\t\t\tpagination: {\n\t\t\t\tnextPageToken: threadsResponse.nextPageToken,\n\t\t\t\tresultSizeEstimate: threadsResponse.resultSizeEstimate,\n\t\t\t\thasMorePages: !!threadsResponse.nextPageToken,\n\t\t\t},\n\t\t\tmetadata: {\n\t\t\t\ttimestamp: new Date().toISOString(),\n\t\t\t\ttotalThreads: threadsResponse.threads?.length || 0,\n\t\t\t\tprocessedThreads: enrichedThreads.length,\n\t\t\t\tsuccessfulThreads: successfulThreads,\n\t\t\t\tfailedThreads: failedThreads,\n\t\t\t\tmaxThreadsProcessed: maxThreads,\n\t\t\t\tcursor: input?.cursor || null,\n\t\t\t\tmaxResults: input?.maxResults || null,\n\t\t\t},\n\t\t};\n\t} catch (error) {\n\t\tconsole.error(\"‚ùå Error in Gmail thread processing:\", error.message);\n\t\tconsole.error(\"Stack trace:\", error.stack);\n\n\t\treturn {\n\t\t\tsuccess: false,\n\t\t\terror: {\n\t\t\t\tmessage: error.message || \"Unknown error\",\n\t\t\t\tstack: error.stack,\n\t\t\t},\n\t\t\tmetadata: {\n\t\t\t\ttimestamp: new Date().toISOString(),\n\t\t\t\tinput: input,\n\t\t\t},\n\t\t};\n\t}\n}\n"
integrationKey: gmail
